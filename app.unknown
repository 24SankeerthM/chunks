from sqlalchemy.orm import declarative_base

# main.py
from fastapi import FastAPI, UploadFile, Form
from pydantic import BaseModel

app = FastAPI()

@app.get("/")
def root():
    return {"message": "Women's Safety Backend is running!"}

import librosa
import numpy as np
import soundfile as sf

def extract_audio_features(file_path):
    y, sr = librosa.load(file_path)
    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
    return np.mean(mfcc.T, axis=0)

@app.post("/analyze-voice/")
async def analyze_voice(file: UploadFile):
    file_path = f"temp_{file.filename}"
    with open(file_path, "wb") as f:
        f.write(await file.read())
    features = extract_audio_features(file_path)
    # result = your_model.predict([features])
    result = "distress"  # stub
    return {"status": result}

from transformers import pipeline
nlp = pipeline("sentiment-analysis")

@app.post("/analyze-text/")
async def analyze_text(text: str = Form(...)):
    result = nlp(text)
    return {"status": result}

class MotionData(BaseModel):
    acc_x: float
    acc_y: float
    acc_z: float
    gyro_x: float
    gyro_y: float
    gyro_z: float

@app.post("/analyze-motion/")
async def analyze_motion(data: MotionData):
    # Your model or rule-based analysis here
    distress = abs(data.acc_x) > 20  # example threshold
    return {"status": "distress" if distress else "normal"}

from twilio.rest import Client

def send_alert_sms(phone, message):
    client = Client("ACCOUNT_SID", "AUTH_TOKEN")
    client.messages.create(body=message, from_='+1234567890', to=phone)

class Location(BaseModel):
    user_id: str
    latitude: float
    longitude: float

@app.post("/update-location/")
async def update_location(loc: Location):
    # store to DB or memory store like Redis
    return {"status": "location updated"}

from sqlalchemy import create_engine, Column, String, Float, Base

engine = create_engine("sqlite:///safety.db")
Base = declarative_base()

class User(Base):
    _tablename_ = "users"
    id = Column(String, primary_key=True)
    name = Column(String)

Base.metadata.create_all(engine)

from fastapi import FastAPI, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
import shutil

app = FastAPI()

# Enable CORS (optional, useful if frontend is separate)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # or restrict to your frontend URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/analyze-voice/")
async def analyze_voice(file: UploadFile = File(...)):
    # Save uploaded file (optional)
    with open(f"temp_{file.filename}", "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    # Simulate AI analysis (replace with real logic)
    analysis_result = {"status": "received", "filename": file.filename, "distress_detected": False}

    return analysis_result
